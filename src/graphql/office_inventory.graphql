scalar ZonedDateTime
scalar BigInt

enum ClassificationEnum {
  UNCLAS
  SENSI
  CONFID
  SEC
  TSEC
  INTEL
}

interface BaseEntity {
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

interface AbstractItem implements BaseEntity {
  name: String
  container: Container

  # Base Entity
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

type OfficeEquipment implements AbstractItem {
  isFragile: Boolean

  # Item
  name: String
  container: Container

  # Base Entity
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

type OfficeFurniture implements AbstractItem {
  isWood: Boolean

  # Item
  name: String
  container: Container

  # Base Entity
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

type Software implements AbstractItem {
  isOpenSource: Boolean

  # Item
  name: String
  container: Container

  # Base Entity
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

union Item = OfficeEquipment | OfficeFurniture | Software

type Container implements BaseEntity {
  items: [Item]
  location: StorageLocationsEnum!

  # Base Entity
  id: String!
  realityId: Int!
  classification: ClassificationEnum
  createdBy: String!
  creationTime: ZonedDateTime!
  lastUpdateTime: ZonedDateTime
  lastUpdateBy: String
  isDeleted: Boolean
  isClassified: Boolean
  secGroups: [String]
}

enum StorageLocationsEnum {
  NORTH
  CENTER
  SOUTH
}

input UpsertOfficeEquipment {
  isFragile: Boolean

  # Item
  id: String
  name: String
  container_id: String

  # Base Entity without id
  realityId: Int
  classification: ClassificationEnum
  isClassified: Boolean
  secGroups: [String]
}

input MoveItem {
  item_id: String
  container_id: String
}

input RemoveItems {
  ids: [String!]!
  """
  When some of the input ID's cannot be deleted (such that they don't exists, etc.):
  When set to TRUE, delets what possible, if FALSE delets nothing.
  Default: TRUE
  """
  allowPartialDelete: Boolean
}

enum ItemTypes {
  SOFTWARE
  OFFICE_EQUIPMENT
  OFFICE_FURNITURE
}

input ContainersFilter {
  byLocation: [StorageLocationsEnum]
}

type Mutation {
  """
  INSERT or UPDATE OfficeEquipment.
  If the input object has an ID field then it's considered UPDATE, otherwise it's considered INSERT.
  You can do both INSERTs and UPDATEs in the same request
  """
  upsertOfficeEquipment(input: [UpsertOfficeEquipment]): [OfficeEquipment]
  moveItems(input: [MoveItem]): [Item]
  """
  Returns the ID's that were deleted succesfully
  """
  removeItems(input: RemoveItems): [String]
}

type Query {
  items: [Item]!
  containers(filter: ContainersFilter): [Container]!
}
